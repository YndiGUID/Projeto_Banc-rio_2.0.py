import datetime
import sys

# Dados dos usuários e suas contas
usuarios = []

# Limites
LIMITE_SAQUES_DIARIOS = 3
LIMITE_VALOR_SAQUE = 500
LIMITE_TRANSACOES_DIARIAS = 10

# Função para criar um novo usuário
def criar_usuario():
    nome = input("Informe o nome do usuário: ")
    cpf = input("Informe o CPF do usuário: ")

    # Verificar se o CPF já existe
    for usuario in usuarios:
        if usuario['cpf'] == cpf:
            print("Usuário com esse CPF já existe.")
            return

    # Adicionar novo usuário
    novo_usuario = {
        'nome': nome,
        'cpf': cpf,
        'contas': []  # Lista de contas associadas ao usuário
    }
    usuarios.append(novo_usuario)
    print(f"Usuário {nome} criado com sucesso!")

# Função para criar uma conta vinculada a um usuário
def criar_conta():
    cpf = input("Informe o CPF do usuário: ")
    usuario = selecionar_usuario(cpf)

    if usuario is None:
        print("Usuário não encontrado.")
        return

    # Verificar se o usuário já tem uma conta
    if usuario['contas']:
        print(f"Usuário {usuario['nome']} já possui uma conta.")
        return

    # Criar nova conta
    nova_conta = {
        'saldo': 0,
        'movimentacoes': [],
        'saques_diarios': 0,
        'data_ultimo_saque': datetime.date.today(),
        'transacoes_diarias': 0,
        'data_ultima_transacao': datetime.date.today(),
    }
    usuario['contas'].append(nova_conta)
    print(f"Conta criada com sucesso para {usuario['nome']}!")

# Função para selecionar um usuário com base no CPF
def selecionar_usuario(cpf):
    for usuario in usuarios:
        if usuario['cpf'] == cpf:
            return usuario
    return None

# Função para verificar e reiniciar o limite de transações diárias
def verificar_limite_transacoes(conta):
    today = datetime.date.today()
    if today != conta['data_ultima_transacao']:
        conta['transacoes_diarias'] = 0
        conta['data_ultima_transacao'] = today

# Função para realizar saques
def realizar_saque(conta):
    verificar_limite_transacoes(conta)  # Reiniciar o limite de transações diárias se for um novo dia
    
    if conta['transacoes_diarias'] >= LIMITE_TRANSACOES_DIARIAS:
        print("Operação falhou! Limite de transações diárias excedido.")
        return

    valor_saque = float(input("Informe o valor do saque: R$ "))
    today = datetime.date.today()

    # Atualizar o número de saques diários
    if today != conta['data_ultimo_saque']:
        conta['saques_diarios'] = 0
        conta['data_ultimo_saque'] = today

    if conta['saques_diarios'] >= LIMITE_SAQUES_DIARIOS:
        print("Operação falhou! Limite de saques diários excedido.")
        return

    if valor_saque > LIMITE_VALOR_SAQUE:
        print(f"O limite por saque é de R$ {LIMITE_VALOR_SAQUE:.2f}. Tente novamente.")
    elif valor_saque > conta['saldo']:
        print(f"Operação falhou! Saldo insuficiente. Seu saldo atual é de R$ {conta['saldo']:.2f}.")
    else:
        conta['saldo'] -= valor_saque
        conta['saques_diarios'] += 1
        conta['transacoes_diarias'] += 1  # Incrementa transações diárias
        now = datetime.datetime.now()
        conta['movimentacoes'].append(f"Saque de R$ {valor_saque:.2f} realizado em {now.strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"Saque de R$ {valor_saque:.2f} realizado com sucesso! Seu saldo atual é de R$ {conta['saldo']:.2f}.")

# Função para realizar depósitos
def realizar_deposito(conta):
    verificar_limite_transacoes(conta)  # Reiniciar o limite de transações diárias se for um novo dia

    if conta['transacoes_diarias'] >= LIMITE_TRANSACOES_DIARIAS:
        print("Operação falhou! Limite de transações diárias excedido.")
        return

    valor_deposito = float(input("Informe o valor do depósito: R$ "))
    if valor_deposito > 0:
        conta['saldo'] += valor_deposito
        conta['transacoes_diarias'] += 1  # Incrementa transações diárias
        now = datetime.datetime.now()
        conta['movimentacoes'].append(f"Depósito de R$ {valor_deposito:.2f} realizado em {now.strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"Depósito de R$ {valor_deposito:.2f} realizado com sucesso! Seu saldo atual é de R$ {conta['saldo']:.2f}.")
    else:
        print("Operação falhou! O valor informado é inválido.")

# Função para exibir o extrato completo
def mostrar_extrato(conta):
    if conta['movimentacoes']:
        print("Extrato da conta:")
        for transacao in conta['movimentacoes']:
            print(transacao)
    else:
        print("Nenhuma movimentação realizada.")

# Função para exibir o saldo atual
def mostrar_saldo(conta):
    print(f"Seu saldo atual é: R$ {conta['saldo']:.2f}")

# Função principal do menu
def menu_inicial():
    print("Bem-vindo ao Banco Python!")
    
    while True:
        opcao = input("\nSelecione a operação desejada:\n[1] - Criar Usuário\n[2] - Criar Conta\n[3] - Depósito\n[4] - Saque\n[5] - Extrato\n[6] - Sair\n")
        
        if opcao == "1":
            criar_usuario()

        elif opcao == "2":
            criar_conta()

        elif opcao == "3":
            cpf = input("Informe o CPF do usuário: ")
            usuario = selecionar_usuario(cpf)
            if usuario and usuario['contas']:
                conta = usuario['contas'][0]
                realizar_deposito(conta)
            else:
                print("Usuário não encontrado ou sem conta.")

        elif opcao == "4":
            cpf = input("Informe o CPF do usuário: ")
            usuario = selecionar_usuario(cpf)
            if usuario and usuario['contas']:
                conta = usuario['contas'][0]
                realizar_saque(conta)
            else:
                print("Usuário não encontrado ou sem conta.")
        
        elif opcao == "5":
            cpf = input("Informe o CPF do usuário: ")
            usuario = selecionar_usuario(cpf)
            if usuario and usuario['contas']:
                conta = usuario['contas'][0]
                mostrar_extrato(conta)
                mostrar_saldo(conta)
            else:
                print("Usuário não encontrado ou sem conta.")
        
        elif opcao == "6":
            print("Obrigado por utilizar o Banco Python!")
            sys.exit()
        
        else:
            print("Opção inválida. Tente novamente.")

# Iniciar o menu
menu_inicial()
